;;;
;;; This is the "makefile" file for building ECL. The purpose of this file is
;;;	- Compile the core of the Common-Lisp library (lsp, clos)
;;;	- Compile the compiler (cmp)
;;;	- Build an executable
;;; This can be done in two ways:
;;;	- Using interpreted code and the ECL_MIN minimal environment.
;;;	- On a second stage, using the final ECL executable, to test it.
;;;

;;;
;;; * Ensure that we have the whole of Common-Lisp to compile
;;;
(load "bare.lsp" :verbose nil)

;;;
;;; * Dump documentation
;;;
#+stage1
(progn
  (load "@true_srcdir@/doc/help.lsp")
  (si::dump-documentation "@true_builddir@/help.doc"))

;;;
;;; * Trick to make names shorter in C files
;;;
(si::package-lock "CL" nil)
(rename-package "CL" "CL" '("COMMON-LISP" "LISP"))

;;;
;;; * Add include path to not yet installed headers, and remove include flag
;;;   (-I) to installed directory, and Notice that we must explicitely mention
;;;   libecl.so/ecl.dll instead of using -lecl. This is to avoid interference
;;;   with an already installed copy of ECL.
;;;
(setq c::*cc-flags*
      "@CFLAGS@ @ECL_CFLAGS@ -I@true_srcdir@/h -I@true_srcdir@/gmp -I@true_builddir@/h"
      c::*cc-format*
      "~A ~A ~:[~*~;~A~] -I@true_builddir@/h~* -w -c ~A -o ~A"
      c::*ld-format*
      "~A -o ~A -L@true_builddir@~* ~{~A ~} ~@?")
#-dlopen 
(setf c::*ld-flags*
      "@LDFLAGS@ @LDRPATH@ @LIBPREFIX@ecl.@LIBEXT@ -lgmp @GCLIB@ @CLIBS@")
#+dlopen
(setf c::*ld-flags*
      "@LDFLAGS@ @LDRPATH@ @SHAREDPREFIX@ecl.@SHAREDEXT@ @CLIBS@"
      c::*ld-shared-flags*
      "@LDRPATH@ @SHARED_LDFLAGS@ @LDFLAGS@ @SHAREDPREFIX@ecl.@SHAREDEXT@ @CLIBS@"
      c::*ld-bundle-flags*
      "@LDRPATH@ @BUNDLE_LDFLAGS@ @LDFLAGS@ @SHAREDPREFIX@ecl.@SHAREDEXT@ @CLIBS@")

;;;
;;; * Compile, load and link Common-Lisp base library
;;;
(setq si::*keep-documentation* nil)
(proclaim '(optimize (safety 2) (space 3)))
(let ((objects (compile-if-old "build:lsp;" +lisp-module-files+
			       :system-p t :c-file t :data-file t :h-file t)))
  (c::build-static-library "lsp" :lisp-files objects))

;;;
;;; * Compile, load and link PCL based Common-Lisp Object System
;;;
(proclaim '(optimize (safety 2) (space 3)))
#+CLOS
(let* ((c::*compile-to-linking-call* nil)
       (objects (compile-if-old "build:clos;" +clos-module-files+
				:system-p t :c-file t :data-file t :h-file t)))
  (c::build-static-library "clos" :lisp-files objects))

(si::system (print (format nil "sh -c 'mkdir tmp; ~
cd tmp; rm -f *; ~
ar -x ../liblsp.a; for i in *.o; do mv $i lsp_$i; done; ar -r ../libecl.a *.o; rm *.o; ~
ar -x ../libclos.a; for i in *.o; do mv $i lsp_$i; done; ar -r ../libecl.a *.o; rm *.o; ~
ranlib ../libecl.a; ~
cd ..; rm -rf tmp/*'")))

#+dlopen
;;;
;;; We do not need the -rpath flag for the library, nor -lecl.
;;;
(let ((c::*ld-shared-flags* "@SHARED_LDFLAGS@ @CLIBS@"))
  (c::shared-cc (compile-file-pathname "ecl" :type :dll)
		"c/main.@OBJEXT@"
		(compile-file-pathname "ecl" :type :lib)
		"-lgmp @GCLIB@"
		. #.(unless (equalp "@LDINSTALLNAME@" "")
			'("@LDINSTALLNAME@"))))

;;;
;;; * Compile, load and link Common-Lisp to C compiler
;;;
(proclaim '(optimize (safety 2) (space 3)))

(si::pathname-translations "SYS" '(("**;*.*.*" "@ecldir@/**/*.*")))

#+(or (not stage1) WANTS-CMP)
(let ((objects (compile-if-old "build:cmp;" +cmp-module-files+
				:system-p t :c-file t :data-file t :h-file t)))
  (c::build-static-library "cmp" :lisp-files objects)
  #+dlopen
  (c::build-fasl "cmp" :lisp-files objects))

(compiler::build-program
 #+(or cross stage1) "ecl"
 #-(or cross stage1) "ecl2"
 :lisp-files '(#+(and (not dlopen) WANTS-CMP) cmp)
 :ld-flags '("-L./"))

#+WANTS-CLX
(progn
  (proclaim '(optimize (safety 2) (space 3)))
  (load "clx/load.lsp")
  (push :clx-ansi-common-lisp *features*)
  (let* ((objects (compile-if-old "build:clx;" +clx-module-files+
				  :system-p t :c-file t :data-file t :h-file t)))
    (c::build-program "eclx" :lisp-files `(#+(and (not dlopen) wants-cmp) cmp
					   ,@objects))))

(quit)
