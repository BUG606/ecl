;;;
;;; This is the "makefile" file for building ECL. The purpose of this file is
;;;	- Compile the core of the Common-Lisp library (lsp, clos)
;;;	- Compile the compiler (cmp)
;;;	- Build an executable
;;; This can be done in two ways:
;;;	- Using interpreted code and the ECL_MIN minimal environment.
;;;	- On a second stage, using the final ECL executable, to test it.
;;;

;;;
;;; * Ensure that we have the whole of Common-Lisp to compile
;;;
(load "bare.lsp" :verbose nil)

;;;
;;; * Dump documentation
;;;
#+stage1
(progn
  (load "@srcdir@/doc/help.lsp")
  (si::dump-documentation "@abs_builddir@/help.doc"))

;;;
;;; * Trick to make names shorter in C files
;;;
(si::package-lock "CL" nil)
(rename-package "CL" "CL" '("COMMON-LISP" "LISP"))

;;;
;;; * Compile, load and link Common-Lisp base library
;;;
(setq si::*keep-documentation* nil)
(in-package "COMMON-LISP-USER")
(load "lsp/defsys.lsp")
(proclaim '(optimize (safety 2) (space 3)))
(sbt::operate-on-system lsp :library)
(si::pathname-translations "SYS" '(("**;*.*" "@abs_builddir@/**/*.*")))
(setq compiler::*cc-flags* (concatenate 'string compiler::*cc-flags* " -I@srcdir@/h -I@srcdir@/gmp -I@builddir@/h"))

;;;
;;; * Compile, load and link PCL based Common-Lisp Object System
;;;
#+CLOS
(progn
(load "clos/defsys.lsp")
(proclaim '(optimize (safety 2) (space 3)))
(let ((c::*compile-to-linking-call* nil))
  (sbt::operate-on-system clos :library))
)

(si::system (format nil "
mkdir tmp; ~
cd tmp; ~
ar -x ../liblsp.a; for i in *.o; do mv $i lsp_$i; done; ar -r ../libecl.a *o; rm *.o; ~
ar -x ../libclos.a; for i in *.o; do mv $i lsp_$i; done; ar -r ../libecl.a *o; rm *.o; ~
ranlib ../libecl.a; ~
cd ..; rm -rf tmp/* liblsp* libclos* "))

#+dlopen
(progn
  (c::shared-cc "./tmp/libecl.so" "c/main.o" "./libecl.a" #+boehm-gc "-lgc")
  (si::system "mv ./tmp/libecl.so ."))

;;;
;;; * Compile, load and link Common-Lisp to C compiler
;;;
#+(or (not stage1) WANTS-CMP)
(progn
(load "cmp/defsys.lsp")
(proclaim '(optimize (safety 2) (space 3)))
(sbt::operate-on-system cmp #-dlopen :library #+dlopen :fasl)
;(sbt::operate-on-system cmp :load)
)

(si::pathname-translations "SYS" '(("**;*.*" "@libdir@/**/*.*")))

(compiler::build-program
 #+(or cross stage1) "ecl"
 #-(or cross stage1) "ecl2"
 :lisp-files '(#+(and (not dlopen) WANTS-CMP) cmp)
 :ld-flags '("-L./"))

(quit)
