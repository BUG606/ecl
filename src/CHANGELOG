ECL 0.9h
========

* Design:

 - Simplified the structure of the frame stack, removing redundant fields.

 - Reworked the structure of the lexical environment to accelerate access to
   variables.

 - New hash routine, similar to SBCL's one, faster and leading to fewer
   collisions between similar strings.

 - Method combinations do not longer rely on a hash table of precomputed
   effective methods. That method required a structural analysis of the forms
   generated by the method combinations, which is plain slower than generating
   the effective method as either a closure (in most cases) or as bytecodes
   (for the most complex declarative forms).

 - CALL-NEXT-METHOD and NEXT-METHOD-P are now implemented in a simpler way,
   without relying on the code walker (which is a damm buggy piece of code).

 - Formerly, the body of methods was walked through, replacing slot access with
   the indices of the slots in the object structure. This is plain wrong
   because the structure of a class may change. Such aggressive optimizations
   may be reimplemented in a future in the compiler, but only when the user
   asks for them.

 - The code walker is no longer needed and has been removed from the core.
   It will be available in the contributed packages.

 - Possibility of configure --without-gmp when cross-compiling (there are no
   true bignums then, just long long int if possible; doesn't work with native
   compilation because compiler needs true bignums).

* System design:

 - ECL's own conservative garbage collector works again.

* Visible changes:

 - The code for handling command line options has been redesigned. Now multiple
   -compile options are allowed; the -o/-c/-h/-data options have to come before
   the associated -compile; we introduce a new -rc option to force loading
   initialization files; errors during initialization are intercepted and cause
   ECL to abort.

* Foreign function interface (FFI):

 - Foreign function return type is now correctly handled, when it is specified
   with a user-defined foreign type that is an alias for a primitive type
   (M. Goffioul)

 - C-INLINE forms which contain :CSTRING as argument are now automatically
   rewritten in terms of WITH-CSTRING. This way, the null terminated strings
   that are generated at run time will not be garbage collected.

 - There is a primitive implementation of run-time automatic generation of
   interfaces to C functions. This allows us to call functions in shared
   libraries without need of the compiler. The current implementation only
   works on the intel architecture with GCC, but should be easily extended.

;;; Local Variables: ***
;;; mode:text ***
;;; fill-column:79 ***
;;; End: ***
