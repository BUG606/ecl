.TH ECL 1 2016-06-18
.UC 4
.SH NAME
ecl \- Embeddable Common Lisp
.SH SYNOPSIS

\fBecl\fP
[\fB-?\fP | \fB--help\fP]
.br
[\fB-dir\fP \fIdir\fP] [\fB-load\fP \fIfile\fP] [\fB-shell\fP \fIfile\fP] [\fB-eval\fP \fIexpr\fP]
.br
[\fB-norc\fP] [\fB-hp\fP | \fB-nohp\fP]
.br
[\fB--c-stack\fP \fIsize\fP] [\fB--lisp-stack\fP \fIsize\fP]
.br
[\fB--heap-size\fP \fIsize\fP] [\fB--frame-stack\fP \fIsize\fP]
.br
[[\fB-o\fP \fIofile\fP] [\fB-c\fP [\fIcfile\fP]] [\fB-h\fP [\fIhfile\fP]] [\fB-data\fP [\fIdatafile\fP]]
.br
 [\fB-s\fP] [\fB-q\fP] \fB-compile\fP \fIfile\fP]
.br
[[\fB-o\fP \fIofile\fP] \fB-link\fP \fIfile\fP+]
.br
[\fB--input-encoding\fP \fIexternal-format\fP] [\fB--output-encoding\fP \fIexternal-format\fP]
.br
[\fB--error-encoding\fP \fIexternal-format\fP] [\fB--encoding\fP \fIexternal-format\fP]

.SH DESCRIPTION
.sp
ECL stands for Embeddable Common Lisp.
The ECL project is an effort to modernize
Giuseppe Attardi's ECL environment to
produce an implementation of the Common Lisp
language which complies to the ANSI X3J13
definition of the language.
.PP
The current ECL implementation features:
.IP \(bu
A bytecode compiler and interpreter.
.IP \(bu
A translator to C.
.IP \(bu
An interface to foreign functions.
.IP \(bu
A dynamic loader.
.IP \(bu
The possibility to build standalone executables.
.IP \(bu
The Common Lisp Object System (CLOS).
.IP \(bu
Conditions and restarts for handling errors.
.IP \(bu
Sockets as ordinary streams.
.IP \(bu
The Gnu Multiprecision library for fast bignum operations.
.IP \(bu
A simple conservative mark & sweep garbage collector.
.IP \(bu
The Boehm-Weiser garbage collector.

.PP
\fBecl\fP without any argument gives you the
interactive lisp.

.SH OPTIONS
.TP 1i

.B \-?, \-\-help
Shows the help prompt without running the ECL.
.TP
.BI \-norc
Do not load configuration files at startup.
.TP
.BI \-\-version
Prints the current version of ECL, without running the ECL.
.TP
.BI \-debug
Turned on by default, this enables the debugging in the setup phase, so that you can debug your
\.rc files.
.TP
.BI \-nodebug
Run without debugging setup phase, meaning that errors prevent ECL from starting up.
.TP
.BI \-eval " file"
Evaluate the
.I file
before starting the ECL, or loading the \.rc files.
.TP
.BI \-shell " file"
Executes the given
.I file
and exits, without providing a read-eval-print loop.
If you want to use lisp as a scripting language, you can write
.BR "#!@bindir@/ecl -shell"
on the first line of the file to be executed, and then ECL will be
automatically invoked.
.TP
.BI \-load " file"
Load source
.I file
before starting ECL.
.TP
.BI \-dir " directory"
Use
.I directory
as a system directory.
.TP
.BI \-\-heap-size " size"
Specify heap
.I size
in kilobytes.
.TP
.BI \-\-lisp-stack " size"
Specify stack
.I size
in kilobytes for lisp system.
.TP
.BI \-\-frame-stack " size"
Specify frame stack
.I size
in kilobytes.
.TP
.BI \-\-c-stack " size"
Specify stack
.I size
 in kilobytes for C compiler.
.TP
.BI \-\-trap-fpe
Make ECL debugger catch floating point exception.
.TP
.BI \-\-no-trap-fpe
Make ECL debugger not catch floating point exception.
.TP
.BI \-\-encoding " encoding"
Specify the external
.I encoding
for standard input, output, trace and error.
.TP
.BI \-\-input-encoding " encoding"
Specify the external
.I encoding
for standard input.
.TP
.BI \-\-output-encoding " encoding"
Specify the external
.I encoding
 for standard output.
.TP
.BI \-\-error-encoding " encoding"
Specify the external
.I encoding
 for standard error.
.TP

.BI \-o " file"
Provide the output target
.I file
for compilation.
.TP
.BI \-c " cfile"
When compiling name the intermediary C file
.I cfile
and do not delete it afterwards.
.TP
.BI \-h " cfile"
When compiling name the intermediary C file
.I cfile
and do not delete it afterwards.
.TP
.BI \-data " [datafile]"
Dumps compiler data into \fIdatafile\fP or, if not
supplied, into a file named after the source file, but
with .data as extension.
.TP
.BI \-compile " file"
Translates
.I file
to C and invokes the local C compiler to produce a
native code program.
.TP
.BI \-q
Short for quiet - produce less notes.
.TP
.BI \-hp
This option is deprecated and doesn't do anything.
.TP
.BI \-nodp
This option is deprecated and doesn't do anything.
.TP
.BI \-s
Produce a linkable object file. It cannot be loaded
with load, but it can be used to build libraries
or standalone executable programs.
.TP

.SH AUTHORS

The original version was developed by Giuseppe Attardi starting from the Kyoto
Common Lisp implementation by Taiichi Yuasa, Masami Hagiya and Juan Jose Garcia
Ripoll. The current maintainer of ECL is Dawid Kochma≈Ñski,
who can be reached at the ECL mailing list.

.SH FILES
.TP
.BR "~/.ecl, ~/.eclrc"
Default initialization files loaded at startup unless the option
.BR \-norc
is provided.
(if they exist).
.SH SEE ALSO
.IP ""
ANSI Common Lisp standard X3.226-1994
.IP ""
The Common Lisp HyperSpec
.SH "BUGS"
Unfortunately it is possible that there are some bugs in the program. In case you find any bug,
please report it as an issue (after making sure that it hasn't been reported or fixed)
to official gitlab repository: https://gitlab.com/embeddable-common-lisp/ecl/issues .
.SH "LICENSE"
  ECL is free software; you can redistribute it and/or modify it
  under the terms of the GNU Library General Public License as published
  by the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version; see file 'Copying'.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Library General Public License for more details.

  You should have received a copy of the GNU Library General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

  PLEASE NOTE THAT:

  This license covers all of the ECL program except for the files
.br
	src/lsp/loop.lsp	; Symbolic's LOOP macro
.br
	src/lsp/pprint.lsp	; CMUCL's pretty printer
.br
	src/lsp/format.lsp	; CMUCL's format
.br

  and the directories


	contrib/		; User contributed extensions
.br
        examples/               ; Examples for the ECL usage
.br
	src/clx/		; portable CLX library from Telent
.br
  Look the precise copyright of these extensions in the corresponding
  files.

  Examples are licensed under: (SPDX-License-Identifier) BSD-2-Clause

  Report bugs, comments, suggestions to the ecl mailing list:
  ecl-devel@common-lisp.net (or use gitlab).
