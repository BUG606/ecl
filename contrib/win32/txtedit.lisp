;;; Copyright (c) 2005, Michael Goffioul (michael dot goffioul at swing dot be)
;;;
;;;   This program is free software; you can redistribute it and/or
;;;   modify it under the terms of the GNU Library General Public
;;;   License as published by the Free Software Foundation; either
;;;   version 2 of the License, or (at your option) any later version.
;;;
;;;   See file '../../Copyright' for full details.
;;;
;;; SAMPLE TEXT EDITOR APPLICATION USING THE WIN32 API
;;;

(require "WIN32" "win32")

(in-package "WIN32")

(defvar *txtedit-class-registered* nil)
(defvar *txtedit-width* 800)
(defvar *txtedit-height* 600)

(defvar *txtedit-edit* nil)
(defvar *txtedit-tab* *NULL*)
(defvar *txtedit-tab-proc* *NULL*)
(defvar *txtedit-current* nil)
(defvar *txtedit-rich-p* nil)
(defstruct txtedit (handle *NULL*) title dirty)

(defvar *txtedit-default-title* "ECL Text Editor")

(defparameter +IDM_OPEN+ 100)
(defparameter +IDM_QUIT+ 101)
(defparameter +IDM_SAVE+ 102)
(defparameter +IDM_SAVEAS+ 103)
(defparameter +IDM_NEW+ 104)
(defparameter +IDM_CUT+ 105)
(defparameter +IDM_COPY+ 106)
(defparameter +IDM_PASTE+ 107)
(defparameter +IDM_UNDO+ 108)
(defparameter +IDM_SELECTALL+ 109)
(defparameter +IDM_ABOUT+ 110)
(defparameter +IDM_NEXTWINDOW+ 111)
(defparameter +IDM_PREVWINDOW+ 112)
(defparameter +IDM_CLOSE+ 113)
(defparameter +IDM_WINDOW_FIRST+ 500)
(defparameter +IDM_WINDOW_LAST+ 600)

(defparameter +EDITCTL_ID+  1000)
(defparameter +TABCTL_ID+ 1001)

(defparameter *txtedit-about-text*
"Text Editor for ECL.

This application serves as a demonstrator
for the WIN32 FFI interface of ECL.

Copyright (c) 2005, Michael Goffioul.")

(defun create-menus ()
  ;(return *NULL*)
  (let ((bar (createmenu))
	(file_pop (createpopupmenu))
	(edit_pop (createpopupmenu))
	(win_pop (createpopupmenu))
	(help_pop (createpopupmenu)))
    ;; File menu
    (appendmenu bar (logior *MF_STRING* *MF_POPUP*) (make-wparam file_pop) "&File")
    (appendmenu file_pop *MF_STRING* +IDM_NEW+ "&New	Ctrl+N")
    (appendmenu file_pop *MF_STRING* +IDM_OPEN+ "&Open...	Ctrl+O")
    (appendmenu file_pop *MF_STRING* +IDM_CLOSE+ "&Close	Ctrl+W")
    (appendmenu file_pop *MF_SEPARATOR* 0 "")
    (appendmenu file_pop *MF_STRING* +IDM_SAVE+ "&Save	Ctrl+S")
    (appendmenu file_pop *MF_STRING* +IDM_SAVEAS+ "Save &As...")
    (appendmenu file_pop *MF_SEPARATOR* 0 "")
    (appendmenu file_pop *MF_STRING* +IDM_QUIT+ "&Exit	Ctrl+Q")
    ;; Edit menu
    (appendmenu bar (logior *MF_STRING* *MF_POPUP*) (make-wparam edit_pop) "&Edit")
    (appendmenu edit_pop *MF_STRING* +IDM_UNDO+ "&Undo	Ctrl+Z")
    (appendmenu edit_pop *MF_SEPARATOR* 0 "")
    (appendmenu edit_pop *MF_STRING* +IDM_CUT+ "&Cut	Ctrl+X")
    (appendmenu edit_pop *MF_STRING* +IDM_COPY+ "Cop&y	Ctrl+C")
    (appendmenu edit_pop *MF_STRING* +IDM_PASTE+ "&Paste	Ctrl+V")
    (appendmenu edit_pop *MF_SEPARATOR* 0 "")
    (appendmenu edit_pop *MF_STRING* +IDM_SELECTALL+ "&Select All	Ctrl+A")
    ;; Windows menu
    (appendmenu bar (logior *MF_STRING* *MF_POPUP*) (make-wparam win_pop) "&Window")
    (appendmenu win_pop *MF_STRING* +IDM_NEXTWINDOW+ "&Next	Ctrl+Right")
    (appendmenu win_pop *MF_STRING* +IDM_PREVWINDOW+ "&Previous	Ctrl+Left")
    ;; Help menu
    (appendmenu bar (logior *MF_STRING* *MF_POPUP*) (make-wparam help_pop) "&Help")
    (appendmenu help_pop *MF_STRING* +IDM_ABOUT+ "&About...")
    bar))

(defun create-accels ()
  (macrolet ((add-accel (key ID accTable pos)
	       `(with-foreign-object (a 'ACCEL)
		  (setf (get-slot-value a 'ACCEL 'fVirt) (logior *FCONTROL* *FVIRTKEY*))
		  (setf (get-slot-value a 'ACCEL 'key) (if (characterp ,key) (char-code ,key) ,key))
		  (setf (get-slot-value a 'ACCEL 'cmd) ,ID)
		  (setf (deref-array ,accTable '(* ACCEL) ,pos) a))))
    (let ((accTable (allocate-foreign-object 'ACCEL 8)))
      (add-accel #\Q +IDM_QUIT+ accTable 0)
      (add-accel #\N +IDM_NEW+ accTable 1)
      (add-accel #\O +IDM_OPEN+ accTable 2)
      (add-accel #\S +IDM_SAVE+ accTable 3)
      (add-accel #\A +IDM_SELECTALL+ accTable 4)
      (add-accel *VK_LEFT* +IDM_PREVWINDOW+ accTable 5)
      (add-accel *VK_RIGHT* +IDM_NEXTWINDOW+ accTable 6)
      (add-accel #\W +IDM_CLOSE+ accTable 7)
      (prog1
	(createacceleratortable accTable 8)
	(free-foreign-object accTable)))))

(defun update-caption (hwnd)
  (let ((str (tab-name (current-editor) #'identity nil)))
    (setwindowtext hwnd (format nil "~@[~A - ~]~A~C" str *txtedit-default-title* #\Null))))

(defun current-editor ()
  (nth *txtedit-current* *txtedit-edit*))

(defun tab-name (editor &optional (fun #'file-namestring) (final-char #\Null))
  (format nil "~:[New~;~:*~A~]~@[*~*~]~@[~C~]"
	      (and (txtedit-title editor) (funcall fun (txtedit-title editor)))
	      (txtedit-dirty editor) final-char))

(defun update-tab (idx)
  (let ((editor (nth idx *txtedit-edit*)))
    (with-foreign-object (tab 'TCITEM)
      (setf (get-slot-value tab 'TCITEM 'mask) *TCIF_TEXT*)
      (setf (get-slot-value tab 'TCITEM 'pszText) (tab-name editor))
      (sendmessage *txtedit-tab* *TCM_SETITEM* idx (make-lparam tab))
      )))

(defun set-current-editor (idx hwnd &optional force-p)
  (when (<= 0 idx (1- (length *txtedit-edit*)))
    (let ((old-ed (and *txtedit-current*
		       (current-editor)))
	  (new-ed (nth idx *txtedit-edit*)))
      (unless (and (null force-p)
		   (eq old-ed new-ed))
	(setq *txtedit-current* idx)
	(setwindowpos (txtedit-handle new-ed) *HWND_TOP* 0 0 0 0 (logior *SWP_NOSIZE* *SWP_NOMOVE*))
	(setfocus (txtedit-handle new-ed))
	(when (/= (sendmessage *txtedit-tab* *TCM_GETCURSEL* 0 0) idx)
	  (sendmessage *txtedit-tab* *TCM_SETCURSEL* idx 0))
	(update-caption hwnd)))))

(defun close-editor (idx hwnd)
  (let ((editor (nth idx *txtedit-edit*)))
    (if (or (null (txtedit-dirty editor))
	    (and (set-current-editor idx hwnd) nil)
	    (let ((m-result (messagebox hwnd (format nil "Do you want to save changes?~@[~2%~A~%~]~C"
						     (txtedit-title editor) #\Null)
					"Confirmation" (logior *MB_YESNOCANCEL* *MB_ICONQUESTION*))))
	      (cond ((= m-result *IDNO*) t)
		    ((= m-result *IDCANCEL*) nil)
		    ((= m-result *IDYES*) (warn "Not implemented") nil))))
      (progn
	(destroywindow (txtedit-handle editor))
	(sendmessage *txtedit-tab* *TCM_DELETEITEM* idx 0)
	(setq *txtedit-edit* (remove editor *txtedit-edit*))
	(when *txtedit-edit*
	  (set-current-editor (min (1- (length *txtedit-edit*))
				   (max *txtedit-current*
					0))
			      hwnd t))
	t)
      nil)))

(defun create-editor (parent &optional (set-current t))
  (with-foreign-object (r 'RECT)
    (getclientrect parent r)
    (sendmessage *txtedit-tab* *TCM_ADJUSTRECT* *FALSE* (make-lparam r))
    (let ((new-editor (make-txtedit :handle (createwindowex *WS_EX_CLIENTEDGE* (if *txtedit-rich-p* *RICHEDIT_CLASS* "EDIT") ""
							    (logior *WS_CHILD* *WS_HSCROLL* *WS_VSCROLL* *WS_VISIBLE* *WS_CLIPSIBLINGS*
								    *ES_AUTOHSCROLL* *ES_AUTOVSCROLL* *ES_MULTILINE* *ES_LEFT*)
							    (get-slot-value r 'RECT 'left)
							    (get-slot-value r 'RECT 'top)
							    (- (get-slot-value r 'RECT 'right) (get-slot-value r 'RECT 'left))
							    (- (get-slot-value r 'RECT 'bottom) (get-slot-value r 'RECT 'top))
							    *txtedit-tab* (make-ID +EDITCTL_ID+) *NULL* *NULL*))))
      (sendmessage (txtedit-handle new-editor) *WM_SETFONT* (make-wparam (getstockobject *SYSTEM_FIXED_FONT*)) 0)
      (and *txtedit-rich-p* (sendmessage (txtedit-handle new-editor) *EM_SETEVENTMASK* 0 *ENM_CHANGE*))
      (with-foreign-object (tab 'TCITEM)
        (setf (get-slot-value tab 'TCITEM 'mask) *TCIF_TEXT*)
	(setf (get-slot-value tab 'TCITEM 'pszText) (tab-name new-editor))
	(sendmessage *txtedit-tab* *TCM_INSERTITEM* (length *txtedit-edit*) (make-lparam tab)))
      (setq *txtedit-edit* (append *txtedit-edit* (list new-editor)))
      (when set-current
	(set-current-editor (1- (length *txtedit-edit*)) parent))
      new-editor)))

(defun unix2dos (str)
  (let ((new-str (make-array (length str) :element-type 'character :adjustable t :fill-pointer 0))
	(return-p nil)
	c)
    (with-output-to-string (out new-str)
      (do ((it (si::make-seq-iterator str) (si::seq-iterator-next str it)))
	  ((null it))
        (case (setq c (si::seq-iterator-ref str it))
	  (#\Return (setq return-p t))
	  (#\Newline (unless return-p (write-char #\Return out)) (setq return-p nil))
	  (t (setq return-p nil)))
	(write-char c out)))
    new-str))

(defun read-file (pn hwnd)
  (setq pn (probe-file pn))
  (with-open-file (f pn)
    (let* ((len (file-length f))
	   (buf (make-string len)))
      (read-sequence buf f)
      (setwindowtext (txtedit-handle (current-editor)) (unix2dos buf))
      (setf (txtedit-dirty (current-editor)) nil)
      (setf (txtedit-title (current-editor)) (substitute #\\ #\/ (namestring pn)))
      (update-caption hwnd)
      (update-tab *txtedit-current*))))

(defun save-file (pn hwnd)
  (unless pn
    (setq pn (txtedit-title (current-editor))))
  (with-open-file (f pn :direction :output :if-does-not-exist :create :if-exists :supersede)
    (let ((txt (getwindowtext (txtedit-handle (current-editor)))))
      (write-sequence txt f)
      (setf (txtedit-title (current-editor)) (substitute #\\ #\/(namestring pn)))
      (setf (txtedit-dirty (current-editor)) nil)
      (update-caption hwnd)
      (update-tab *txtedit-current*))))

(defun close-or-exit (idx hwnd)
  (if (= (length *txtedit-edit*) 1)
    (postmessage hwnd *WM_CLOSE* 0 0)
    (close-editor idx hwnd)))

(defun tab-proc (hwnd umsg wparam lparam)
  (cond ((= umsg *WM_COMMAND*)
	 (txtedit-proc (getparent hwnd) umsg wparam lparam))
	(t
	  (callwindowproc *txtedit-tab-proc* hwnd umsg wparam lparam))))

(defun txtedit-proc (hwnd umsg wparam lparam)
  (cond ((= umsg *WM_DESTROY*)
	 (postquitmessage 0)
	 0)
	((= umsg *WM_CLOSE*)
	 (if (do ((flag t))
	         ((not (and *txtedit-edit* flag)) flag)
	       (setq flag (close-editor 0 hwnd)))
	   (destroywindow hwnd)
	   0))
	((= umsg *WM_CREATE*)
	 (setq *txtedit-tab* (createwindowex 0 *WC_TABCONTROL* ""
					     (logior *WS_CHILD* *WS_VISIBLE* *WS_CLIPCHILDREN*) 0 0 0 0
					     hwnd (make-ID +TABCTL_ID+) *NULL* *NULL*))
	 (setq *txtedit-tab-proc* (register-wndproc *txtedit-tab* #'tab-proc))
	 (sendmessage *txtedit-tab* *WM_SETFONT* (make-wparam (getstockobject *DEFAULT_GUI_FONT*)) 0)
	 (create-editor hwnd)
	 (with-cast-int-pointer (lparam CREATESTRUCT)
	   (let ((params (get-slot-value lparam 'CREATESTRUCT 'lpCreateParams)))
	     (unless (null-pointer-p params)
	       (read-file (convert-from-foreign-string params) hwnd))))
	 0)
	((= umsg *WM_SIZE*)
	 (unless (null-pointer-p *txtedit-tab*)
	   (movewindow *txtedit-tab* 0 0 (loword lparam) (hiword lparam) *TRUE*)
	   (with-foreign-object (r 'RECT)
	     (setrect r 0 0 (loword lparam) (hiword lparam))
	     (sendmessage *txtedit-tab* *TCM_ADJUSTRECT* *FALSE* (make-lparam r))
	     (dotimes (k (length *txtedit-edit*))
	       (movewindow (txtedit-handle (nth k *txtedit-edit*))
			   (get-slot-value r 'RECT 'left) (get-slot-value r 'RECT 'top)
			   (- (get-slot-value r 'RECT 'right) (get-slot-value r 'RECT 'left))
			   (- (get-slot-value r 'RECT 'bottom) (get-slot-value r 'RECT 'top))
			   (if (= k *txtedit-current*) *TRUE* *FALSE*)))))
	 0)
	((= umsg *WM_SETFOCUS*)
	 (unless (null-pointer-p (txtedit-handle (current-editor)))
	   (setfocus (txtedit-handle (current-editor))))
	 0)
	((= umsg *WM_NOTIFY*)
	 (with-cast-int-pointer (lparam NMHDR)
	   (let ((ctrl-ID (get-slot-value lparam 'NMHDR 'idFrom))
		 (code (get-slot-value lparam 'NMHDR 'code))
		 (hnd (get-slot-value lparam 'NMHDR 'hwndFrom)))
	     (cond ((= ctrl-ID +TABCTL_ID+)
		    (cond ((= code *TCN_SELCHANGE*)
			   (set-current-editor (sendmessage hnd *TCM_GETCURSEL* 0 0) hwnd))
			  (t
			    )))
		   (t
		     ))))
	 0)
	((= umsg *WM_CONTEXTMENU*)
	 (let ((hnd (make-handle wparam))
	       (x (get-x-lparam lparam))
	       (y (get-y-lparam lparam)))
	   (cond ((equal hnd *txtedit-tab*)
		  (with-foreign-objects ((ht 'TCHITTESTINFO)
					 (pt 'POINT))
		    (setf (get-slot-value pt 'POINT 'x) x)
		    (setf (get-slot-value pt 'POINT 'y) y)
		    (screentoclient *txtedit-tab* pt)
		    (setf (get-slot-value ht 'TCHITTESTINFO 'pt) pt)
		    (let ((tab (sendmessage *txtedit-tab* *TCM_HITTEST* 0 (make-lparam ht))))
		      (when (>= tab 0)
			(let ((hMenu (createpopupmenu))
			      menu-ID)
			  (appendmenu hMenu *MF_STRING* +IDM_CLOSE+ "&Close")
			  (when (/= (setq menu-ID (trackpopupmenuex hMenu (logior *TPM_NONOTIFY* *TPM_RETURNCMD*) x y hwnd *NULL*)) 0)
			    (close-or-exit tab hwnd))
			  (destroymenu hMenu))))))))
	 0)
	((= umsg *WM_INITMENUPOPUP*)
	 (case (loword lparam)
	   (2 (let* ((wMenu (make-handle wparam))
		     (nPos (loword lparam))
		     (nItems (getmenuitemcount wMenu)))
		(dotimes (j (- nItems 2))
		  (deletemenu wMenu 2 *MF_BYPOSITION*))
		(when *txtedit-edit*
		  (appendmenu wMenu *MF_SEPARATOR* 0 "")
		  (loop for e in *txtedit-edit*
			for k from 0
			do (progn
			     (appendmenu wMenu *MF_STRING* (+ +IDM_WINDOW_FIRST+ k) (tab-name e))
			     (when (= k *txtedit-current*)
			       (checkmenuitem wMenu (+ k 3) (logior *MF_BYPOSITION* *MF_CHECKED*))))))
		(enablemenuitem wMenu +IDM_PREVWINDOW+ (if (= *txtedit-current* 0) *MF_GRAYED* *MF_ENABLED*))
		(enablemenuitem wMenu +IDM_NEXTWINDOW+ (if (< *txtedit-current* (1- (length *txtedit-edit*))) *MF_ENABLED* *MF_GRAYED*))
		))
	   )
	 0)
	((= umsg *WM_COMMAND*)
	 (let ((ctrl-ID (loword wparam))
	       (nmsg (hiword wparam))
	       (hnd (make-pointer lparam 'HANDLE)))
	   (cond ((= ctrl-ID +EDITCTL_ID+)		  
		  (cond ((= nmsg *EN_CHANGE*)
			 (unless (txtedit-dirty (current-editor))
			   (setf (txtedit-dirty (current-editor)) t)
			   (update-caption hwnd)
			   (update-tab *txtedit-current*)))
			(t
			 )))
		 ((= ctrl-ID +IDM_QUIT+)
		  (sendmessage hwnd *WM_CLOSE* 0 0))
		 ((= ctrl-ID +IDM_OPEN+)
		  (let ((pn (get-open-filename :owner hwnd :filter '(("LISP source file (*.lisp)" . "*.lisp;*.lsp")
								     ("All Files (*)" . "*")))))
		    (when pn
		      (create-editor hwnd)
		      (read-file pn hwnd))))
		 ((and (= ctrl-ID +IDM_SAVE+)
		       (txtedit-title (current-editor)))
		  (save-file nil hwnd))
		 ((or (= ctrl-ID +IDM_SAVEAS+)
		      (and (= ctrl-ID +IDM_SAVE+)
			   (null (txtedit-title (current-editor)))))
		  (let ((pn (get-open-filename :owner hwnd :filter '(("LISP source file (*.lisp)" . "*.lisp;*.lsp")
								     ("All Files (*)" . "*"))
					       :dlgfn #'getsavefilename :flags *OFN_OVERWRITEPROMPT*)))
		    (when pn
		      (save-file pn hwnd))))
		 ((= ctrl-ID +IDM_NEW+)
		  (create-editor hwnd))
		 ((= ctrl-ID +IDM_CUT+)
		  (sendmessage (txtedit-handle (current-editor)) *WM_CUT* 0 0))
		 ((= ctrl-ID +IDM_COPY+)
		  (sendmessage (txtedit-handle (current-editor)) *WM_COPY* 0 0))
		 ((= ctrl-ID +IDM_PASTE+)
		  (sendmessage (txtedit-handle (current-editor)) *WM_PASTE* 0 0))
		 ((= ctrl-ID +IDM_UNDO+)
		  (unless (= (sendmessage (txtedit-handle (current-editor)) *EM_CANUNDO* 0 0) 0)
		    (sendmessage (txtedit-handle (current-editor)) *EM_UNDO* 0 0)))
		 ((= ctrl-ID +IDM_SELECTALL+)
		  (sendmessage (txtedit-handle (current-editor)) *EM_SETSEL* 0 -1))
		 ((= ctrl-ID +IDM_ABOUT+)
		  (messagebox hwnd *txtedit-about-text* "About" (logior *MB_OK* *MB_ICONINFORMATION*)))
		 ((= ctrl-ID +IDM_NEXTWINDOW+)
		  (unless (>= (1+ *txtedit-current*) (length *txtedit-edit*))
		    (set-current-editor (1+ *txtedit-current*) hwnd)))
		 ((= ctrl-ID +IDM_PREVWINDOW+)
		  (unless (= *txtedit-current* 0)
		    (set-current-editor (1- *txtedit-current*) hwnd)))
		 ((= ctrl-ID +IDM_CLOSE+)
		  (close-or-exit *txtedit-current* hwnd))
		 ((<= +IDM_WINDOW_FIRST+ ctrl-ID +IDM_WINDOW_LAST+)
		  (set-current-editor (- ctrl-ID +IDM_WINDOW_FIRST+) hwnd)
		  0)
		 (t
		   )))
	 0)
	(t
	 (defwindowproc hwnd umsg wparam lparam))
  ))

(defun register-txtedit-class ()
  (unless *txtedit-class-registered*
    (when (and *txtedit-rich-p* (null-pointer-p (loadlibrary "riched20.dll")))
      (error "Cannot load WIN32 library: riched20.dll"))
    (make-wndclass "SimpleTextEditor"
		   :lpfnWndProc #'txtedit-proc)
    (setq *txtedit-class-registered* t)))

(defun unregister-txtedit-class ()
  (when *txtedit-class-registered*
    (unregisterclass "SimpleTextEditor" *NULL*)
    (and *txtedit-rich-p* (freelibrary (getmodulehandle "riched20.dll")))
    (setq *txtedit-class-registered* nil)))

(defun txtedit (&optional fname &key rich-p &aux (*txtedit-rich-p* rich-p))
  (register-txtedit-class)
  (let* ((fname-str (if fname
		      (convert-to-foreign-string (coerce fname 'simple-string))
		      *NULL*))
	 (w (createwindow "SimpleTextEditor"
			 *txtedit-default-title*
			 (logior *WS_OVERLAPPEDWINDOW*)
			 *CW_USEDEFAULT* *CW_USEDEFAULT*
			 *txtedit-width* *txtedit-height*
			 *NULL* (create-menus) *NULL* fname-str))
	 (accTable (create-accels)))
    (showwindow w *SW_SHOWNORMAL*)
    (updatewindow w)
    (event-loop :accelTable accTable :accelMain w)
    (setq *txtedit-edit* nil)
    (destroyacceleratortable accTable)
    (unless (null-pointer-p fname-str)
      (free-foreign-object fname-str))
    (unregister-txtedit-class)
    nil))
